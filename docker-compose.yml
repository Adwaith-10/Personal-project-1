version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: foodvision_db
    environment:
      POSTGRES_DB: foodvision
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/data/foods_seed.csv:/docker-entrypoint-initdb.d/foods_seed.csv:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - foodvision_network

  # Redis Cache
  cache:
    image: redis:7-alpine
    container_name: foodvision_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - foodvision_network

  # MinIO Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: foodvision_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - foodvision_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: foodvision_backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/foodvision
      - REDIS_URL=redis://cache:6379
      - STORAGE_TYPE=minio
      - S3_BUCKET=foodvision-images
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - S3_ENDPOINT_URL=http://minio:9000
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
      - ./backend/ml_models:/app/ml_models
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - foodvision_network
    restart: unless-stopped

  # Web Portal (Streamlit)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: foodvision_web
    environment:
      - BACKEND_URL=http://backend:8000
    ports:
      - "8501:8501"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - foodvision_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: foodvision_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - web
    networks:
      - foodvision_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  foodvision_network:
    driver: bridge

# Development overrides
x-development: &development
  environment:
    - DEBUG=true
    - LOG_LEVEL=DEBUG

# Production overrides
x-production: &production
  environment:
    - DEBUG=false
    - LOG_LEVEL=INFO
  restart: always
  deploy:
    replicas: 2
    resources:
      limits:
        memory: 2G
        cpus: '1.0'
      reservations:
        memory: 1G
        cpus: '0.5'
